require 'generators/spree/dummy/dummy_generator'
require 'generators/spree/install/install_generator'

desc 'Generates a dummy app for testing'
task :test_app, :user_class do |t, args|
  args.with_defaults(user_class: 'Spree::LegacyUser')

  lib_name = File.join('spree', Pathname.pwd.basename)

  require(lib_name)

  Spree::DummyGenerator.start(%W[
    --lib_name #{lib_name}
    --quiet
  ])

  Spree::InstallGenerator.start(%W[
    --lib_name #{lib_name}
    --auto-accept
    --migrate false
    --seed false
    --quiet
    --user_class #{args[:user_class]}
  ])

  puts 'Setting up dummy database and precompiling asssts'
  system(
    { 'RAILS_ENV' => 'test' },
    *%w[bundle exec rake db:migrate:reset assets:precompile],
    out: File::NULL
  )
end

require 'devtools'
Devtools.init_rake_tasks

Rake.application.load_imports

# Remove metrics:mutant from devtools
task('metrics:mutant').clear
namespace :metrics do
  desc 'Run mutant'
  task mutant: :coverage do
    puts 'Mutant is disabled while style fixing'
    next

    require('mutant')

    # Force the environment to be test
    unless ENV['RAILS_ENV'].eql?('test')
      fail 'The RAILS_ENV environment variable must be set to "test"'
    end

    # Eager load application and dependencies

    # rubocop:disable LineLength
    system(*%w[
      mutant
      --use rspec
      --require ./spec/dummy/config/environment.rb
      --since HEAD~1
      --
      Spree*
    ]) or fail 'Mutant task is not successful'
  end
end

# Remove metrics:coverage from devtools
#
# Differs from upstream with executing `spec` instead of just `spec:unit`.
# Spree is not ready for more fine grained runs.
task('metrics:coverage').clear
namespace :metrics do
  desc 'Measure code coverage'
  task :coverage do
    system(
      *%w[bundle exec rspec spec --order random]
    ) or fail "Specs failed"
  end
end
